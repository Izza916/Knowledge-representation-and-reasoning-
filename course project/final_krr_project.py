# -*- coding: utf-8 -*-
"""final-krr-project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/134y8RgUZJOHd_2G4RvJTK-C95rkC0vvW

# Load the OWL file and Check the classes in the ontology
"""

!pip install owlready2

from owlready2 import get_ontology

ontology_path = '/content/t20-owlviz.owl'
onto = get_ontology(ontology_path).load()

print("\nClasses in the ontology:")
for cls in onto.classes():
    print(cls)

"""# Install necessary libraries (if not already installed), Import libraries, Initialize RDF graph and namespaces, Print initialization confirmation"""

!pip install rdflib pandas SPARQLWrapper

import pandas as pd
from rdflib import Graph, URIRef, Literal, Namespace
from rdflib.namespace import RDF, OWL, XSD
from urllib.parse import quote
import networkx as nx
import matplotlib.pyplot as plt
from rdflib.plugins.sparql import prepareQuery

ex = Namespace("http://example.org/t20#")
g = Graph()
g.bind("ex", ex)

print("Libraries and RDF graph initialized!")

"""# Load and preprocess data for both innings, Handle missing values, Update file paths for your local or cloud environment"""

def load_and_preprocess_data(file_path):
    try:
        df = pd.read_csv(file_path)
        df.dropna(inplace=True)
        df.reset_index(drop=True, inplace=True)
        print(f"Data from {file_path} loaded and preprocessed!")
        return df
    except Exception as e:
        print(f"Error loading data from {file_path}: {e}")
        return pd.DataFrame()

data_1st = load_and_preprocess_data('/content/1st Innings T20.csv')
data_2nd = load_and_preprocess_data('/content/2nd Innings T20.csv')

"""# Make Function to create a safe URI from entity names, Function to add match data to RDF graph, Add team URIs, Add action details, Example cognitive state rule for aggression, Example: Adding man of the match, Add match data for both innings"""

def create_safe_uri(base, entity_name):
    """Create a safe URI for an entity name."""
    return URIRef(f"{base}{quote(entity_name.replace(' ', '_'))}")

def add_match_data_to_graph(df, inning):
    for _, row in df.iterrows():
        match_uri = URIRef(f"{ex}Match_{inning}_{row['matchId']}")
        g.add((match_uri, ex.matchId, Literal(row['matchId'])))
        g.add((match_uri, ex.city, Literal(row['city'])))
        g.add((match_uri, ex.venue, Literal(row['venue'])))

        batting_team = create_safe_uri(ex, f"Team_{row['battingTeam']}")
        bowling_team = create_safe_uri(ex, f"Team_{row['bowlingTeam']}")
        g.add((match_uri, ex.battingTeam, batting_team))
        g.add((match_uri, ex.bowlingTeam, bowling_team))

        action_uri = URIRef(f"{ex}Action_{inning}_{row['matchId']}_{row['balls']}")
        g.add((action_uri, ex.runs, Literal(row['runs'])))
        g.add((action_uri, ex.balls, Literal(row['balls'])))
        g.add((action_uri, ex.player_out, Literal(row['player_out'])))
        g.add((match_uri, ex.hasAction, action_uri))

        if int(row['runs']) > 30 and int(row['balls']) < 15:
            g.add((action_uri, ex.cognitiveState, Literal("Aggression")))

        if 'manOfTheMatch' in df.columns and pd.notna(row['manOfTheMatch']):
            mom = create_safe_uri(ex, f"Player_{row['manOfTheMatch']}")
            g.add((match_uri, ex.manOfTheMatch, mom))

add_match_data_to_graph(data_1st, "1stInnings")
add_match_data_to_graph(data_2nd, "2ndInnings")

print("RDF triples added to the graph.")

"""# Print RDF triples for inspection"""

print("\nInspecting RDF Triples:")
for s, p, o in g:
    print(s, p, o)

"""
# Inspect actions"""

print("\nInspecting actions:")
for s, p, o in g.triples((None, ex.runs, None)):
    runs = int(o)
    balls_action = list(g.objects(s, ex.balls))
    if balls_action:
        balls = float(balls_action[0])
        print(f"Action: {s}, Runs: {runs}, Balls: {balls}")

"""
# Cognitive states and conditions, Add actions to cognitive states based on conditions"""

cognitive_states = {
    "Aggression": [],
    "Defensive": []
}
for s, p, o in g.triples((None, ex.runs, None)):
    runs = int(o)
    balls_action = list(g.objects(s, ex.balls))
    if balls_action:
        balls = float(balls_action[0])
        if runs > 30 and balls < 15:
            cognitive_states["Aggression"].append(str(s))
        elif runs < 5 and balls > 10:
            cognitive_states["Defensive"].append(str(s))

"""# Print cognitive states"""

print("\nCognitive States and Actions:")
for state, actions in cognitive_states.items():
    print(f"{state}: {actions}")

"""


# SPARQL Query to retrieve matches by city"""

query_city_matches = prepareQuery(
    """
    SELECT ?match ?city
    WHERE {
        ?match ex:city ?city.
    }
    """,
    initNs={"ex": ex}
)

print("\nMatches by City:")
for row in g.query(query_city_matches):
    print(f"Match: {row.match}, City: {row.city}")

"""
# Serialize the RDF graph to a file"""

rdf_output_path = '/content/updated_T20.rdf'
g.serialize(destination=rdf_output_path, format='xml')

print(f"RDF graph serialized and saved to {rdf_output_path}.")

"""# Visualize RDF graph using NetworkX and matplotlib (Optimized Version):

Convert RDF graph to a NetworkX graph (limit to first 500 triples for efficiency), Visualize only the first 500 triples, Use a simpler layout for faster rendering,Try circular_layout for efficiency, Draw the graph Adjust node size for better visibility, Reduce font size if graph is dense

"""

import networkx as nx
import matplotlib.pyplot as plt

nx_graph = nx.DiGraph()
for i, (subj, pred, obj) in enumerate(g):
    if i >= 500:
        break
    nx_graph.add_edge(str(subj), str(obj), label=str(pred))

pos = nx.circular_layout(nx_graph)

plt.figure(figsize=(10, 10))
nx.draw(
    nx_graph,
    pos,
    with_labels=True,
    node_size=500,
    font_size=8,
    font_weight='bold',
    node_color='skyblue'
)
plt.title("Optimized RDF Graph Visualization")
plt.show()

""" # Create a Pyvis network graph:

Load your RDF graph, Create a directed graph in NetworkX, Add a subset of triples to the NetworkX graph, Limit to first 500 triples for testing, Convert NetworkX graph to Pyvis, Customize the visualization, Reduce complexity for faster layout, Save and display the graph

"""

!pip install pyvis

from pyvis.network import Network
import networkx as nx
import rdflib
from rdflib import Graph

g = Graph()
g.parse("updated_T20.rdf", format="xml")
nx_graph = nx.DiGraph()
for i, (subj, pred, obj) in enumerate(g):
    if i > 500:
        break
    nx_graph.add_node(str(subj), label=str(subj))
    nx_graph.add_node(str(obj), label=str(obj))
    nx_graph.add_edge(str(subj), str(obj), title=str(pred))

pyvis_net = Network(notebook=True, width="1000px", height="700px", directed=True, cdn_resources='in_line')
pyvis_net.from_nx(nx_graph)
pyvis_net.repulsion(
    node_distance=100,
    spring_length=150,
)
pyvis_net.show_buttons(filter_=['physics'])
pyvis_net.show("rdf_graph.html")

"""
# Add new cognitive states: Risk Aversion and Fatigue, Update RDF graph with new cognitive states, Print all cognitive states"""

cognitive_states["RiskAversion"] = []
cognitive_states["Fatigue"] = []

for s, p, o in g.triples((None, ex.runs, None)):
    runs = int(o)
    balls_action = list(g.objects(s, ex.balls))
    if balls_action:
        balls = float(balls_action[0])
        if runs == 0 and balls > 20:
            cognitive_states["RiskAversion"].append(str(s))
            g.add((s, ex.cognitiveState, Literal("RiskAversion")))
        elif runs < 10 and balls > 30:
            cognitive_states["Fatigue"].append(str(s))
            g.add((s, ex.cognitiveState, Literal("Fatigue")))

print("\nUpdated Cognitive States:")
for state, actions in cognitive_states.items():
    print(f"{state}: {actions}")

"""
# Visualize cognitive states using Matplotlib, Count actions for each cognitive state, Plot the cognitive states"""

import matplotlib.pyplot as plt

state_counts = {state: len(actions) for state, actions in cognitive_states.items()}

plt.figure(figsize=(10, 6))
plt.bar(state_counts.keys(), state_counts.values(), color='skyblue')
plt.xlabel('Cognitive States', fontsize=14)
plt.ylabel('Number of Actions', fontsize=14)
plt.title('Number of Actions per Cognitive State', fontsize=16)
plt.show()

"""
# Create Pyvis network with remote CDN resources, Limit the number of actions per cognitive state for performance, Add nodes and edges for cognitive states, Save the network to an HTML file"""

from pyvis.network import Network

net = Network(notebook=True, width="1000px", height="700px", cdn_resources='remote')
net.toggle_physics(True)

max_actions_per_state = 5

for state, actions in cognitive_states.items():
    net.add_node(state, label=state, color="blue")
    for action in actions[:max_actions_per_state]:
        net.add_node(action, label=action, color="green")
        net.add_edge(state, action, color="black")

net.show("cognitive_states.html")
print("Cognitive states visualized in cognitive_states.html!")

"""# Optional: Open the HTML files automatically (if running in a local Jupyter Notebook)"""

import webbrowser
webbrowser.open("rdf_graph.html")
webbrowser.open("cognitive_states.html")